services:
  traefik:
    container_name: traefik
    image: traefik:v3.2
    restart: unless-stopped
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--serversTransport.insecureSkipVerify=true'
      - '--entrypoints.web.address=:80'
      - '--entryPoints.web.forwardedHeaders.insecure'
    ports:
      - '80:80'
      - '8080:8080'
    networks:
      - traefik
      - mongo
      - rabbitmq
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
  mongo:
    container_name: mongo
    image: mongo:4.2.24-bionic
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - mongo
    volumes:
      - ./db-data/mongo/:/data/db
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    container_name: mongo-express
    image: mongo-express:1.0.2-20-alpine3.19
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - mongo
    depends_on:
      mongo:
        condition: service_healthy
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.mongo-express.rule=Host("mongo-express.localhost")'
      - 'traefik.http.services.mongo-express.loadbalancer.server.port=8081'
      - 'traefik.http.routers.mongo-express.entrypoints=web'
      - 'traefik.http.routers.mongo-express.tls=false'
      - 'traefik.docker.network=mongo_network'

  rabbitmq:
    container_name: rabbitmq
    image: 'rabbitmq:management-alpine'
    restart: unless-stopped
    ports:
      - '5672:5672'
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - rabbitmq
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      mode: replicated
      replicas: 1
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.rabbitmq-painel.rule=Host("rabbitmq-painel.localhost")'
      - 'traefik.http.routers.rabbitmq-painel.service=rabbitmq-painel'
      - 'traefik.http.services.rabbitmq-painel.loadbalancer.server.port=15672'
      - 'traefik.http.routers.rabbitmq-painel.entrypoints=web'
      - 'traefik.http.routers.rabbitmq.tls=false'
      - 'traefik.docker.network=rabbitmq_network'

  consumer:
    container_name: consumer
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      QUEUE_NAME: 'logger'
      RABBITHOST: 'amqp://admin:password@rabbitmq:5672/'
      MONGODB_URI: 'mongodb://mongo:27017'
      MONGODB_DATABASE: 'logs'
      MONGODB_COLLECTION: 'logs'
      MONGODB_USERNAME: 'admin'
      MONGODB_PASSWORD: 'password'
    networks:
      - mongo
      - rabbitmq
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

networks:
  mongo:
    name: mongo_network
    driver: bridge
    internal: true
  rabbitmq:
    name: rabbitmq_network
    driver: bridge
    internal: true
  traefik:
    name: traefik_network
    driver: bridge
